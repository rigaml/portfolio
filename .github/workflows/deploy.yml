name: Deploy to AWS

on:
  push:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.11]

    services:
      #Sets postgres service to run the tests
      postgres:
        image: postgres:13
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: portfoliouser
          POSTGRES_PASSWORD: dummypassword
          POSTGRES_DB: portfoliodb

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry

    - name: Install Dependencies
      run: |
        poetry install --no-interaction --no-ansi

    - name: Run Tests
      env:
        # Set Django's settings module for pytest
        DJANGO_SETTINGS_MODULE: portfolio.settings
        DATABASE_URL: postgres://portfoliouser:dummypassword@localhost:5432/portfoliodb
      run: |
        poetry run pytest
  
  wait-for-approval:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Wait for manual approval
      run: echo "Waiting for manual approval to deploy..."

  deploy:
    needs: wait-for-approval
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: portfolio-app
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Update ECS service
      run: |
        aws ecs update-service --cluster portfolio-cluster --service portfolio-service --force-new-deployment